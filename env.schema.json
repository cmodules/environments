{
  //"$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://github.com/cmodules/environments",
  "title": "Environments",
  "type": "object",
  "description": "The presets specify a list of variables and other arguments to control project-local runtime behaviours.",
  "required": [
    "version"
  ],
  "oneOf": [
    {
      "properties": {
        "version": {
          "const": 1,
          "description": "A required integer representing the version of the JSON schema."
        },
        "environmentPresets": { "$ref": "#/definitions/environmentPresetsV1" }
      },
      "additionalProperties": false
    },
    {
      "properties": {
        "version": {
          "const": 2,
          "description": "A required integer representing the version of the JSON schema."
        },
        "environmentPresets": { "$ref": "#/definitions/environmentPresetsV2" }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "environmentPresetsV1": {
      "type": "array",
      "description": "An array of environment preset objects.",
      "allOf": [
        { "$ref": "#/definitions/environmentPresetsItemsV1" }
      ],
      "items": {
        "properties": {
          "name": {},
          "hidden": {},
          "inherits": {},
          "description": {},
          "variables": {}
        },
        "required": [
          "name", "variables"
        ],
        "additionalProperties": false
      }
    },
    "environmentPresetsItemsV1": {
      "type": "array",
      "description": "An optional map array of environment variables. \nThe key is the variable name (which must not be an empty string). \nEach variable is set regardless of whether or not a value was given to it by the process's environment. \nThis field supports macro expansion, and environment variables in this map may reference each other, and may be listed in any order, as long as such references do not cause a cycle. \nExample: \nIf 'FOO' = '${BAR}', then 'BAR' != '${FOO}'. \nEnvironment variables are inherited through the inherits field, and the preset's environment will be the union of its own environment and the environment from all its parents. \nIf multiple presets in this union define the same variable, the standard rules of inherits are applied. Setting a variable to null causes it to not be set, even if a value was inherited from another preset.",
      "items": {
        "type": "object",
        "description": "A configure preset object.",
        "properties": {
          "name": {
            "type": "string",
            "description": "A required string representing the machine-friendly name of the preset. This identifier is used in the --preset argument. There must not be two presets in the union of all '*.env.json' files in the same directory with the same name.",
            "minLength": 1
          },
          "description": {
            "type": "string",
            "description": "An optional string with a human-friendly description of the preset."
          },
          "hidden": {
            "type": "boolean",
            "description": "An optional boolean specifying whether or not a preset should be hidden. If a preset is hidden, it should not be used in any '--preset=' arguments or flags. Hidden presets are intended to be used as a base for other presets to inherit via the inherits field."
          },
          "inherits": {
            "anyOf": [
              {
                "type": "string",
                "description": "An optional string representing the name of the preset to inherit from.",
                "minLength": 1
              },
              {
                "type": "array",
                "description": "An optional array of strings representing the names of presets to inherit from. The preset will inherit all of the fields from the inherits presets by default (except name, hidden, inherits, description, and displayName), but can override them as desired. If multiple inherits presets provide conflicting values for the same field, the earlier preset in the inherits list will be preferred.",
                "items": {
                  "type": "string",
                  "description": "An optional string representing the name of the preset to inherit from.",
                  "minLength": 1
                }
              }
            ]
          },
          "variables": {
            "type": "object",
            "description": "A map of environment variables. \nThe key is the variable name (which must not be an empty string). \nEach variable is set regardless of whether or not a value was given to it by the process's environment. \nThis field supports macro expansion, and environment variables in this map may reference each other, and may be listed in any order, as long as such references do not cause a cycle. \nExample: \nIf 'FOO' = '${BAR}', then 'BAR' != '${FOO}'. \nEnvironment variables are inherited through the inherits field, and the preset's environment will be the union of its own environment and the environment from all its parents. \nIf multiple presets in this union define the same variable, the standard rules of inherits are applied. Setting a variable to null causes it to not be set, even if a value was inherited from another preset.",
            "properties": {},
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "null",
                  "description": "Setting a variable to null causes it to not be set (i.e., 'un-set'), even if a value was inherited from another preset."
                },
                {
                  "type": "string",
                  "description": "A string representing the value of the variable."
                },
                {
                  "type": "boolean",
                  "description": "A boolean representing the truthiness of the variable."
                },
                {
                  "type": "integer",
                  "description": "An integer-precision number representing the value of the variable."
                },
                {
                  "type": "number",
                  "description": "A decimal-precision number representing the value of the variable."
                },
                {
                  "type": "array",
                  "description": "An array of strings representing the total value of the variable, to be conjoined using the 'SEPERATOR' variable. \nThe preset will inherit all of the fields from the inherits presets by default (except name, hidden, inherits, description, and displayName), but can override them as desired. \nIf multiple inherits presets provide conflicting values for the same field, the earlier preset in the inherits list will be preferred.",
                  "items": {
                    "type": "string",
                    "description": "A string representing the value of the variable.",
                    "minLength": 1
                  }
                }
              ]
            },
            "propertyNames": {
              "pattern": "^.+$"
            }
          }
        }
      }
    },
    "environmentPresetsV2": {
      "type": "array",
      "description": "An array of environment preset objects.",
      "allOf": [
        { "$ref": "#/definitions/environmentPresetsItemsV2" }
      ],
      "items": {
        "properties": {
          "name": {},
          "hidden": {},
          "inherits": {},
          "description": {},
          "variables": {},
          "flags": {},
          "utilities": {},
          "commands": {},
          "binaries": {},
          "libraries": {},
          "directories": {},
          "files": {},
          "paths": {}
        },
        "required": [
          "name", "variables"
        ],
        "additionalProperties": false
      }
    },
    "environmentPresetsItemsV2": {
      "type": "array",
      "description": "An optional map array of environment variables. \nThe key is the variable name (which must not be an empty string). \nEach variable is set regardless of whether or not a value was given to it by the process's environment. \nThis field supports macro expansion, and environment variables in this map may reference each other, and may be listed in any order, as long as such references do not cause a cycle. \nExample: \nIf 'FOO' = '${BAR}', then 'BAR' != '${FOO}'. \nEnvironment variables are inherited through the inherits field, and the preset's environment will be the union of its own environment and the environment from all its parents. \nIf multiple presets in this union define the same variable, the standard rules of inherits are applied. Setting a variable to null causes it to not be set, even if a value was inherited from another preset.",
      "items": {
        "type": "object",
        "description": "A configure preset object.",
        "properties": {
          "name": {
            "type": "string",
            "description": "A required string representing the machine-friendly name of the preset. This identifier is used in the --preset argument. There must not be two presets in the union of all '*.env.json' files in the same directory with the same name.",
            "minLength": 1
          },
          "description": {
            "type": "string",
            "description": "An optional string with a human-friendly description of the preset."
          },
          "hidden": {
            "type": "boolean",
            "description": "An optional boolean specifying whether or not a preset should be hidden. If a preset is hidden, it should not be used in any '--preset=' arguments or flags. Hidden presets are intended to be used as a base for other presets to inherit via the inherits field."
          },
          "inherits": {
            "anyOf": [
              {
                "type": "string",
                "description": "An optional string representing the name of the preset to inherit from.",
                "minLength": 1
              },
              {
                "type": "array",
                "description": "An optional array of strings representing the names of presets to inherit from. The preset will inherit all of the fields from the inherits presets by default (except name, hidden, inherits, description, and displayName), but can override them as desired. If multiple inherits presets provide conflicting values for the same field, the earlier preset in the inherits list will be preferred.",
                "items": {
                  "type": "string",
                  "description": "An optional string representing the name of the preset to inherit from.",
                  "minLength": 1
                }
              }
            ]
          },
          "variables": {
            "type": "object",
            "description": "A map of environment variables. \nThe key is the variable name (which must not be an empty string). \nEach variable is set regardless of whether or not a value was given to it by the process's environment. \nThis field supports macro expansion, and environment variables in this map may reference each other, and may be listed in any order, as long as such references do not cause a cycle. \nExample: \nIf 'FOO' = '${BAR}', then 'BAR' != '${FOO}'. \nEnvironment variables are inherited through the inherits field, and the preset's environment will be the union of its own environment and the environment from all its parents. \nIf multiple presets in this union define the same variable, the standard rules of inherits are applied. Setting a variable to null causes it to not be set, even if a value was inherited from another preset.",
            "properties": {},
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "null",
                  "description": "Setting a variable to null causes it to not be set (i.e., 'un-set'), even if a value was inherited from another preset."
                },
                {
                  "type": "string",
                  "description": "A string representing the value of the variable."
                },
                {
                  "type": "boolean",
                  "description": "A boolean representing the truthiness of the variable."
                },
                {
                  "type": "integer",
                  "description": "An integer-precision number representing the value of the variable."
                },
                {
                  "type": "number",
                  "description": "A decimal-precision number representing the value of the variable."
                },
                {
                  "type": "array",
                  "description": "An array of strings representing the total value of the variable, to be conjoined using the 'SEPERATOR' variable. \nThe preset will inherit all of the fields from the inherits presets by default (except name, hidden, inherits, description, and displayName), but can override them as desired. \nIf multiple inherits presets provide conflicting values for the same field, the earlier preset in the inherits list will be preferred.",
                  "items": {
                    "type": "string",
                    "description": "A string representing the value of the variable.",
                    "minLength": 1
                  }
                }
              ]
            },
            "propertyNames": {
              "pattern": "^.+$"
            }
          },
          "flags": {
            "type": "object",
            "description": "An optional map of command line flags. \nThe key is the flag name (which must not be an empty string). \nEach flag is set regardless of whether or not a value was given to it by the process's environment. \nThis field supports macro expansion, and flags in this map may reference each other, and may be listed in any order, as long as such references do not cause a cycle. \nExample: \nIf 'FOO' = '${BAR}', then 'BAR' != '${FOO}'. \nFlags are inherited through the inherits field, and the preset's flags will be the union of its own flags and the flags from all its parents. \nIf multiple presets in this union define the same flag, the standard rules of inherits are applied. Setting a flag to null causes it to not be set, even if a value was inherited from another preset.",
            "properties": {},
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "null",
                  "description": "Setting a flag to null causes it to not be set (i.e., 'un-set'), even if a value was inherited from another preset."
                },
                {
                  "type": "string",
                  "description": "A string representing the value of the flag."
                }
              ]
            },
            "propertyNames": {
              "pattern": "^.+$"
            }
          }
        }
      }
    }
  }
}
